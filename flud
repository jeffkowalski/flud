#!/usr/bin/env ruby
# frozen_string_literal: true

# -------------------------------------------------------------------------------------------
# ------------------------------------------------------------------------------------ [Time]
# -------------------------------------------------------------------------------------------

require 'time'

class Time
  def self.genesis
    new(0)
  end

  def self.apocalypse
    new(2038)
  end
end

# -------------------------------------------------------------------------------------------
# ---------------------------------------------------------------------------- [XivelyClient]
# -------------------------------------------------------------------------------------------

require 'xively-rb'

class XivelyClient
  def initialize
    @client = Xively::Client.new $config[:xively_apikey]
    @url = "/v2/feeds/#{$config[:xively_feed]}"
  end

  def put(stream, value)
    $logger.debug "putting data {#{stream}=>#{value}} to xively"
    json = { version: '1.0.0', datastreams: [{ id: stream, current_value: value }] }.to_json
    begin
      response = @client.put @url, body: json
    rescue StandardError => e
      $logger.error "can't put in xivelyclient, #{e}"
    end
    $logger.debug response
  end
end

# -------------------------------------------------------------------------------------------
# ---------------------------------------------------------------------------------- [Valves]
# -------------------------------------------------------------------------------------------

require 'wiringpi2'

class Valves
  # For connections between RPi and OSpi, see
  # http://rayshobby.net/wordpress/wp-content/uploads/2013/02/ospi_diagram_connection.jpg
  # and for translations between header pins and wiringpi pins numbers, see
  # http://wiringpi.com/pins/
  STORE_PIN =  3 # 15 #&Device::BCM2835::RPI_GPIO_P1_15; # Latch D7 -> ST_CP 12 (storage clock)
  DATA_PIN  =  2 # 13 #&Device::BCM2835::RPI_GPIO_P1_13; # Data  D5 -> DS    14 (data in)
  NOE_PIN   =  0 # 11 #&Device::BCM2835::RPI_GPIO_P1_11; # ~OE   A1 -> ~OE   13 (not output enable)
  SHIFT_PIN =  7 #  7 #&Device::BCM2835::RPI_GPIO_P1_07; # Clock D6 -> SH_CP 11 (shift clock)
  #                                                 # connect rPi 2 5v  to VCC 16
  #                                                 # connect rPi 6 GND to GND  8
  #                                                 # connect rPi 6 GND to ~OE 13 (output enable, active low) to ground

  # Connect the shift register pins to these GPIO pins.
  def initialize
    @gpio = nil
    @on = 0

    if RUBY_PLATFORM == 'armv6l-linux-eabihf'
      $logger.info 'initializing valves'
      @gpio = WiringPi::GPIO.new
      [DATA_PIN, SHIFT_PIN, STORE_PIN, NOE_PIN].each { |pin| @gpio.pin_mode pin, WiringPi::OUTPUT }
      [DATA_PIN, SHIFT_PIN, STORE_PIN, NOE_PIN].each { |pin| @gpio.digital_write pin, WiringPi::LOW }
    else
      $logger.info 'no valves found on this platform'
    end

    stop
  end

  attr_reader :on

  def off?
    @on.zero?
  end

  def commit
    $logger.info 'committing valves'

    if @gpio
      @gpio.digital_write SHIFT_PIN, WiringPi::LOW
      @gpio.digital_write STORE_PIN, WiringPi::LOW
      8.downto(1) do |ii|
        @gpio.digital_write SHIFT_PIN, WiringPi::LOW
        @gpio.digital_write DATA_PIN, @on == ii ? WiringPi::HIGH : WiringPi::LOW
        @gpio.digital_write SHIFT_PIN, WiringPi::HIGH
      end
      @gpio.digital_write STORE_PIN, WiringPi::HIGH
    end

    8.downto(1) do |ii|
      $xively.put "valve.#{ii}", @on == ii ? WiringPi::HIGH : WiringPi::LOW
    end
  end

  def advance
    $semaphore.synchronize
    begin
      loop do
        @on += 1
        break if @on > $config[:valve_specs].length || $config[:valve_specs][@on - 1][:duration]
      end

      if @on > $config[:valve_specs].length
        $logger.info 'valve schedule complete'
        @on = 0
        $trigger = Time.apocalypse
      else
        $logger.info "advancing to run valve #{@on} - '#{$config[:valve_specs][@on - 1][:name]}' for #{$config[:valve_specs][@on - 1][:duration]} minutes"
        $trigger = Time.now + $config[:valve_specs][@on - 1][:duration] * 60 # duration in seconds
      end
    end

    commit
  end

  def start(valve)
    $semaphore.synchronize
    begin
      @on = valve
      if @on > $config[:valve_specs].length || @on.negative?
        $logger.info "valve #{@on} out of range"
        @on = 0
        $trigger = Time.apocalypse
      else
        $logger.info "starting to run valve #{@on} - '#{$config[:valve_specs][@on - 1][:name]}' for #{$config[:valve_specs][@on - 1][:duration]} minutes"
        $trigger = Time.now + $config[:valve_specs][@on - 1][:duration] * 60 # duration in seconds
      end
    end
    commit
  end

  def stop
    $logger.info 'stopping valves'
    $semaphore.synchronize
    begin
      @on = 0
      $trigger = Time.apocalypse
    end
    commit
  end
end

# -------------------------------------------------------------------------------------------
# ------------------------------------------------------------------------------ [Updateable]
# -------------------------------------------------------------------------------------------

class Updateable
  def initialize
    $logger.debug "initializing #{self.class}"
    @update_interval = 0
    @last_check = Time.genesis
  end

  attr_reader :update_interval, :last_check

  def freshen
    @last_check = Time.now
  end

  def stale?
    $logger.debug "checking whether #{self.class} (#{last_check}, #{update_interval}) is stale"
    Time.now - last_check >= update_interval
  end
end

# -------------------------------------------------------------------------------------------
# -------------------------------------------------------------------------- [CalendarClient]
# -------------------------------------------------------------------------------------------

require 'googleauth'
require 'googleauth/stores/file_token_store'
require 'google/apis/calendar_v3'
require 'fileutils'
require_relative './patch.rb'

OOB_URI = 'urn:ietf:wg:oauth:2.0:oob'
APPLICATION_NAME = 'flud'
CLIENT_SECRETS_PATH = ["/etc/#{APPLICATION_NAME}", '.'].select { |dir| File.exist? "#{dir}/client_secret.json" }.first + '/client_secret.json'
ENV['HOME'] ||= '/root'
CREDENTIALS_PATH = File.join(Dir.home, '.credentials', 'flud.yaml')
SCOPE = 'https://www.googleapis.com/auth/calendar.readonly'

##
# Ensure valid credentials, either by restoring from the saved credentials
# files or intitiating an OAuth2 authorization. If authorization is required,
# the user's default browser will be launched to approve the request.
#
# @return [Google::Auth::UserRefreshCredentials] OAuth2 credentials
def authorize(interactive)
  FileUtils.mkdir_p(File.dirname(CREDENTIALS_PATH))
  client_id = Google::Auth::ClientId.from_file(CLIENT_SECRETS_PATH)
  token_store = Google::Auth::Stores::FileTokenStore.new(file: CREDENTIALS_PATH)
  authorizer = Google::Auth::UserAuthorizer.new(client_id, SCOPE, token_store)
  user_id = 'default'
  credentials = authorizer.get_credentials(user_id)
  if credentials.nil? && interactive
    url = authorizer.get_authorization_url(base_url: OOB_URI)
    puts "Open the following URL in the browser and enter the resulting code after authorization\n" + url
    code = $stdin.readline
    credentials = authorizer.get_and_store_credentials_from_code(
      user_id: user_id, code: code, base_url: OOB_URI
    )
  end
  credentials
end

class CalendarClient < Updateable
  def initialize
    super
    @update_interval = 15 * 60 # seconds
  end

  def auth(interactive)
    #
    # initialize the API
    #
    service = Google::Apis::CalendarV3::CalendarService.new
    service.client_options.application_name = APPLICATION_NAME
    service.authorization = authorize interactive
    @cal = service
  end

  def trigger
    trigger = Time.apocalypse
    $logger.info 'retrieving google calendar'

    page_token = nil
    begin
      result = @cal.list_events($config[:calendar_id],
                                max_results: 1,
                                single_events: true,
                                order_by: 'startTime',
                                time_min: (Time.now - update_interval).iso8601,
                                time_max: (Time.now + 3 * 24 * 60 * 60).iso8601,
                                page_token: page_token,
                                fields: 'items(id,summary,location,organizer,attendees,description,start,end),next_page_token')
      # result.items.each { |ev| $logger.debug "start: #(ev.start.date_time}" }
      trigger = Time.parse result.items.first.start.date_time.to_s unless result.items.first.nil?
    rescue StandardError => e
      $logger.error "couldn't get calendar, #{e}"
    end
    freshen
    $logger.info "trigger = #{trigger}"
    trigger
  end
end

# -------------------------------------------------------------------------------------------
# --------------------------------------------------------------------------- [WeatherClient]
# -------------------------------------------------------------------------------------------

require 'wunderground'

class WeatherClient < Updateable
  def initialize
    super
    @update_interval = 60 * 60 # seconds
    @weather = Wunderground.new $config[:wunderground_apikey]
  end

  def rainfall
    rainfall = 0
    if @weather
      $logger.info "retrieving weather for zipcode #{$config[:zipcode]}"
      begin
        data = @weather.forecast_for $config[:zipcode]
        # $logger.debug data;
        data['forecast']['simpleforecast']['forecastday'].each do |forecast|
          $logger.debug "#{forecast['date']['pretty']} => #{forecast['qpf_allday']['in']}"
          rainfall += forecast['qpf_allday']['in']
        end
      rescue StandardError => e
        $logger.error "couldn't get weather, #{e}"
      end
    end
    freshen
    $logger.info "rainfall = #{rainfall} in"
    $xively.put 'forecast.rainfall', rainfall
    rainfall
  end
end

# -------------------------------------------------------------------------------------------
# ---------------------------------------------------------------------------------- [Status]
# -------------------------------------------------------------------------------------------

class Status < Updateable
  def initialize
    super
    @update_interval = 1 * 60 # seconds
  end

  def print
    current = Time.now
    if !$valves.off?
      $logger.debug "v#{$valves.on} #{Time.at($trigger - current).utc.strftime '%H:%M:%S'}"
    elsif $trigger > current
      $logger.debug "#{$rainfall} in #{Time.at($trigger - current).utc.strftime '%H:%M:%S'}"
    else
      $logger.debug "rainfall = #{$rainfall} in"
    end
    freshen
  end
end

# -------------------------------------------------------------------------------------------
# ------------------------------------------------------------------------------- [Webserver]
# -------------------------------------------------------------------------------------------

require 'webrick'

class Webserver
  def initialize(_options)
    @webserver = WEBrick::HTTPServer.new Port: 8888, Logger: $logger, AccessLog: []
    @webserver.mount '/', Simple
  end

  def self.run!(options)
    Webserver.new(options).run!
  end

  def run!
    $logger.info 'starting webserver'
    @webserver.start
  end
end

class Simple < WEBrick::HTTPServlet::AbstractServlet
  def encode_entities(str)
    str
  end

  def do_GET(request, response) # rubocop:disable Naming/MethodName
    $logger.info 'webserver GET ' + request.path
    case request.path
    when '/api/advance'
      do_api_advance request, response
    when '/api/stop'
      do_api_stop request, response
    when '/api/startValve'
      do_api_startValve request, response
    when '/api/getStatus'
      do_api_getStatus request, response
    when '/favicon.ico'
      response.status = 404
    when '/'
      do_index request, response
    end
  end

  def do_api_advance(_request, response)
    $valves.advance
    response.status = 200
    response['Content-Type'] = 'text/html'
    response.body = $valves.on.to_s
  end

  def do_api_stop(_request, response)
    $valves.stop
    response.status = 200
    response['Content-Type'] = 'text/html'
    response.body = $valves.on.to_s
  end

  def do_api_start_valve(request, response)
    $valves.start request.query['valve'].to_i
    response.status = 200
    response['Content-Type'] = 'text/html'
    response.body = $valves.on.to_s
  end

  def do_api_get_status(_request, response)
    response.status = 200
    response['Content-Type'] = 'text/json'
    response.body = { timestamp: Time.now,
                      trigger: $trigger,
                      rainfall: $rainfall,
                      moisture: $moisture,
                      voltage: $voltage,
                      dirtmon_timestamp: $dirtmon_timestamp,
                      valveOn: $valves.on }.to_json
  end

  def do_index(_request, response)
    response.status = 200
    response['Content-Type'] = 'text/html'
    response.body = <<INDEX_HTML
      <script src="http://ajax.googleapis.com/ajax/libs/jquery/1.10.2/jquery.min.js"></script>
      <script>
      function indicateValve (num) {
        $("div.running").hide ();
        $("div.running").filter (function (index) {return index + 1 == num;}).show ("fast");
      }
      function start_valve (num) {
        $.ajax({
          url: "/api/start_valve",
          data: {
            valve: num + 1
          },
          success: function (data) {
            $("#status").html ("<strong>success " + data + "</strong>");
            indicateValve (data);
          }
        });
      }
      function stop () {
        $.ajax({
          url: "/api/stop",
          success: function (data) {
            $("#status").html ("<strong>success " + data + "</strong>");
            indicateValve (data);
          }
        });
      }
      function advance () {
        $.ajax({
          url: "/api/advance",
          success: function (data) {
            $("#status").html ("<strong>success " + data + "</strong>");
            indicateValve (data);
          }
        });
      }
      function refreshStatus () {
        $.ajax({
          url: "/api/get_status",
          dataType: "json",
          success: function (data) {
            $("#timestamp").html(data.timestamp);
            $("#trigger").html(data.trigger);
            $("#rainfall").html(data.rainfall);
            $("#moisture").html(data.moisture);
            $("#voltage").html(data.voltage);
            $("#dirtmon_timestamp").html(data.dirtmon_timestamp);
            indicateValve (data.valveOn);
          },
        });
      }
      $(document).ready(function () {
        refreshStatus ();
        setInterval (refreshStatus, 30 * 1000);
      });
      </script>
      <div id="status"></div>
      Server timestamp =    <div style="display:inline" id="timestamp">#{Time.now}</div><br>
      Next trigger =        <div style="display:inline" id="trigger">#{$trigger}</div><br>
      Forecasted rainfall = <div style="display:inline" id="rainfall">#{$rainfall}</div> in<br>
      Soil moisture =       <div style="display:inline" id="moisture">#{$moisture}</div><br>
      Sensor voltage =      <div style="display:inline" id="voltage">#{$voltage}</div>V<br>
      Dirtmon timestamp =   <div style="display:inline" id="dirtmon_timestamp">#{$dirtmon_timestamp}</div><br>
      <br>
      Valves <form method='POST'>
INDEX_HTML
    (0..($config[:valve_specs].length - 1)).each do |ii|
      response.body += "<input type='text' name='n#{ii}' value='#{$config[:valve_specs][ii][:name]}' />" \
                       "<input type='text' name='d#{ii}' value='#{$config[:valve_specs][ii][:duration]}' />" \
                       "<input type='button' name='s#{ii}' value='start' onclick='start_valve(#{ii})' />" \
                       "<div class='running' style='display:inline;'>&lt;-- ON</div>" \
                       '<br>'
    end
    response.body += "<input type='button' value='advance' onclick='advance()' />" \
                     "<input type='button' value='stop' onclick='stop()' />" \
                     '<br><br>' \
                     "Google calendar id  <input type='text' name='calendar_id'         value='#{$config[:calendar_id]}' /><br>" \
                     "Wunderground API key<input type='text' name='wunderground_apikey' value='#{$config[:wunderground_apikey]}' /><br>" \
                     "Zipcode             <input type='text' name='zipcode'             value='#{$config[:zipcode]}' /><br>" \
                     "Xively API key      <input type='text' name='xively_apikey'       value='#{$config[:xively_apikey]}' /><br>" \
                     "Xively feed id      <input type='text' name='xively_feed'         value='#{$config[:xively_feed]}' /><br>" \
                     "Rain threshold      <input type='text' name='rain_threshold'      value='#{$config[:rain_threshold]}' /><br>" \
                     "Moisture threshold  <input type='text' name='moisture_threshold'  value='#{$config[:moisture_threshold]}' /><br>" \
                     "<input type='hidden' name='h' />" \
                     "<input type='submit' value='Submit' /></form>"
  end

  def do_POST(request, response) # rubocop:disable Naming/MethodName
    $logger.info "webserver POST #{request.query}"
    request.query.each do |key, value|
      if (index = /^n(\d+)/.match(key))
        $config[:valve_specs][index.captures[0].to_i][:name] = value.to_s
      elsif (index = /^d(\d+)/.match(key))
        $config[:valve_specs][index.captures[0].to_i][:duration] = value.to_i
      elsif /_threshold/.match(key)
        $config[key.to_sym] = value.to_f
      else
        $config[key.to_sym] = value.to_s
      end
    end
    $config.write
    do_index request, response
  end
end

# -------------------------------------------------------------------------------------------
# --------------------------------------------------------------------------------- [Dirtmon]
# -------------------------------------------------------------------------------------------

require 'serialport'

class Dirtmon
  attr_reader :options, :quit

  def initialize(options)
    @options = options
    @port = '/dev/ttyUSB0'
    @baud_rate = 57_600
    @data_bits = 8
    @stop_bits = 1
    @parity    = SerialPort::NONE
    # ob->handshake("none") || $log->logdie ("failed setting handshake")
  end

  def self.run!(options)
    Dirtmon.new(options).run!
  end

  def run!
    $logger.info 'dirtmon starting'
    SerialPort.open(@port, @baud_rate, @data_bits, @stop_bits, @parity) do |sp|
      sp.puts '1i 212g' # node 1 in group 212
      until quit
        $logger.debug 'dirtmon listening'
        while (message = sp.gets.chomp)
          next unless message =~ /^OK 2/

          # byte -> 0  1  2  3  4  5  6   7   8  9  10  11  12
          #         ====  ----------  - --- ---  -----  ------
          # eg   -> OK 2  2  0  0  0  2 115 117  0   0   0   0
          #  long ping;      // 32-bit counter
          #  byte id :7;     // identity, should be different for each node
          #  byte boost :1;  // whether compiled for boost chip or not
          #  byte vcc1;      // VCC before transmit, 1.0V = 0 .. 6.0V = 250
          #  byte vcc2;      // battery voltage (BOOST=1), or VCC after transmit (BOOST=0)
          #  word sensor;    // sensor1
          #  word sensor;    // sensor2
          rec = message.split(' ').map(&:to_i)
          ping  = rec[2] + rec[3] * 256 + rec[4] * 256 * 256 + rec[5] * 256 * 256 * 256
          id    = rec[6]
          vcc1  = rec[7] / 250.0 * 5.0 + 1.0
          vcc2  = rec[8] / 250.0 * 5.0 + 1.0
          sensor1 = rec[9] + rec[10] * 256
          sensor2 = rec[11] + rec[12] * 256

          $logger.info ['dirtmon', ping, id, vcc1, vcc2, sensor1, sensor2].join(' ')
          $xively.put 'dirtmon1.vcc1', vcc1
          $xively.put 'dirtmon1.vcc2', vcc2
          $xively.put 'dirtmon1.moisture1', sensor1
          $xively.put 'dirtmon1.moisture2', sensor2
          $moisture = (sensor1 + sensor2) / 2
          $voltage  = (vcc1 + vcc2) / 2.0
          $dirtmon_timestamp = Time.now
        end
        sleep 1
      end
    end
    $logger.info 'dirtmon exiting'
  end
end

# -------------------------------------------------------------------------------------------
# ---------------------------------------------------------------------------------- [Config]
# -------------------------------------------------------------------------------------------

class Configuration
  attr_accessor :params

  def initialize(locations)
    @params = { calendar_id: nil,
                wunderground_apikey: nil,
                xively_feed: nil,
                xively_apikey: nil,
                zipcode: nil,
                rain_threshold: nil,
                moisture_threshold: nil,
                valve_specs: (1..8).map { |v| { name: "valve.#{v}", duration: 1 } } }

    locations.each do |file|
      next unless File.file? file

      @conf_file = file
      @params = YAML.load_file @conf_file
      break
    end

    return if @conf_file

    @conf_file = locations[0]
    write
  end

  def [](param)
    params[param]
  end

  def []=(param, value)
    params[param] = value
  end

  def write
    $logger.info 'writing configuration file'
    File.open(@conf_file, 'w') do |file|
      file.write(YAML.dump(@params))
    end
  end
end

$config = Configuration.new(['flud.yml', '/etc/flud/flud.yml'])

class IOToLog < IO
  def initialize(logger)
    @logger = logger
  end

  def write(message)
    # assume anything written to stderr is an error
    @logger.error(message)
  end
end

# -------------------------------------------------------------------------------------------
# ---------------------------------------------------------------------------------- [Server]
# -------------------------------------------------------------------------------------------

require 'fileutils'
require 'logger'
require 'thor'

# server class from https://github.com/jakesgordon/ruby-sample-daemon/blob/master/lib/server.rb
class Server < Thor
  attr_reader :quit

  desc 'auth', 'Authorize the application with google services'
  def auth
    $logger = Logger.new STDOUT
    $calendar = CalendarClient.new
    $calendar.auth true
  end

  option :logfile,    type: :string,  default: '/var/log/flud.log', desc: 'log output to file (use empty string to log to stdout)'
  option :pidfile,    type: :string,  default: '/var/run/flud.pid', desc: 'write pid to file (use empty string to avoid pidfile)'
  option :verbose,    type: :boolean, aliases: '-v', desc: 'increase verbosity'
  option :foreground, type: :boolean, aliases: '-f', desc: "don't daemonize, run in foreground"
  option :debug,      type: :boolean, desc: "debug mode, implies --logfile='', --pidfile='', --foreground, --verbose"
  default_task :control
  desc 'control', 'Run the flud control system'
  def control
    puts options
    newoptions = options.dup # unfreeze
    options = newoptions
    if options[:debug]
      options[:logfile] = ''
      options[:pidfile] = ''
      options[:verbose] = true
      options[:foreground] = true
    end

    if (!options[:foreground]) && Process.euid != 0
      puts 'only root can daemonize, run with --foreground instead'
      exit
    end

    check_pid options[:pidfile]
    daemonize unless options[:foreground]
    write_pid options[:pidfile]
    trap_signals

    redirect_output options[:logfile]

    $logger = Logger.new STDOUT
    $logger.level = options[:verbose] ? Logger::DEBUG : Logger::INFO
    $logger.info 'starting'

    $semaphore = Mutex.new
    $xively    = XivelyClient.new
    $valves    = Valves.new
    $weather   = WeatherClient.new
    $calendar  = CalendarClient.new
    $calendar.auth options[:logfile].empty? && options[:foreground]
    $status    = Status.new
    $trigger   = Time.apocalypse
    $rainfall  = 0
    $moisture  = 0
    $voltage   = 0
    $dirtmon_timestamp = Time.genesis

    Thread.new { Dirtmon.run! nil }
    Thread.new { Webserver.run! nil }

    until quit
      if $valves.off? && $weather.stale?
        $rainfall = $weather.rainfall
      elsif $valves.off? && $calendar.stale?
        $trigger = $calendar.trigger
      elsif $trigger < Time.now
        $logger.debug 'triggering'
        if !$valves.off? || ($rainfall <= $config[:rain_threshold] && $moisture <= $config[:moisture_threshold])
          $valves.advance
        else
          if $rainfall > $config[:rain_threshold] # rubocop:disable Metrics/BlockNesting
            $logger.info 'rainfall delay'
          elsif $moisture > $config[:moisture_threshold] # rubocop:disable Metrics/BlockNesting
            $logger.info 'moisture delay'
          end
          $trigger += $weather.update_interval
        end
      elsif $status.stale?
        $status.print
      end
      sleep 1
    end

    $valves.stop

    # Mark a clean exit in the log
    $logger.info 'exiting'
  end

  no_commands
  begin
    def daemonize
      exit if fork
      Process.setsid
      exit if fork
      Dir.chdir '/'
    end

    def redirect_output(logfile)
      return if logfile.empty?

      FileUtils.mkdir_p(File.dirname(logfile), mode: 0o755)
      FileUtils.touch logfile
      File.chmod 0o644, logfile
      $stderr.reopen logfile, 'a'
      $stdout.reopen $stderr
      $stdout.sync = $stderr.sync = true
    end

    def write_pid(pidfile)
      return unless !pidfile.empty? && Process.euid.zero?

      begin
        File.open(pidfile, ::File::CREAT | ::File::EXCL | ::File::WRONLY) { |f| f.write Process.pid.to_s }
        at_exit { File.delete(pidfile) if File.exist? pidfile }
      rescue Errno::EEXIST
        check_pid pidfile
        retry
      end
    end

    def check_pid(pidfile)
      return if pidfile.empty?

      case pid_status pidfile
      when :running, :not_owned
        puts "A server is already running. Check #{pidfile}"
        exit 1
      when :dead
        File.delete pidfile
      end
    end

    def pid_status(pidfile)
      return :exited unless File.exist? pidfile

      pid = ::File.read(pidfile).to_i
      return :dead if pid.zero?

      Process.kill 0, pid
      :running
    rescue Errno::ESRCH
      :dead
    rescue Errno::EPERM
      :not_owned
    end

    def trap_signals
      trap(:INT)  { @quit = true; }
      trap(:QUIT) { @quit = true; }
      trap(:TERM) { @quit = true; }
    end
  end
end

# -------------------------------------------------------------------------------------------
# ------------------------------------------------------------------------------------- [Run]
# -------------------------------------------------------------------------------------------

Server.start
